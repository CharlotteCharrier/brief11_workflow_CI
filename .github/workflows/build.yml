on:
  push:
    branches:
      - main
      - beta

permissions:
  contents: write

jobs:
  get-version:
     uses: shiipou/github-actions/.github/workflows/get-version.yml@main

  build:
    name: Rust build
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    needs:
      - get-version
    steps:
      - name: Print version
        run: |
         echo "${{ needs.get-version.outputs.version }}"
         echo "${{ needs.get-version.outputs.changelogs }}" >> changelogs.md
         echo "${{ needs.get-version.outputs.is-pre-release }}"
         echo "${{ needs.get-version.outputs.will-release }}"
      # - name: Print changelogs from changelogs.md
      #   run: cat changelogs.md
      - name: Setup Rust
        uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: check rust version
        run: rustc --version
      - name: check rustup
        run: rustup --version
      - name: install WASM
        run: rustup target add wasm32-unknown-unknown
      - name: install trunk
        uses: jetli/trunk-action@v0.5.0
      - name: build trunk
        run: trunk build --release
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: trunk
          path: dist/
        

  release: 
    name: Release
    runs-on: ubuntu-latest
    #dépend de get-version et de build
    needs: 
      - get-version
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          #télécharge l'artifact qui oprte le nom spring (défini dans le build)
          name: trunk
          #endroit où ça se télécharge
          path: dist/
      - name: zip artifacts
        run: zip -r rust-app.zip dist/*
      - name: Create Github Release
        env:
        #récupérer la version
          VERSION: "${{ needs.get-version.outputs.version }}"
        #récupérer le nom du repo sous format owner/repository
          REPO: "${{ github.repository }}"
        #récupérer le numéro du commit qui a déclenché le workflow
          COMMIT : "${{ github.sha }}"
        #token créé par github pour le commit
        #pas besoin de le spécifier dans la commande d'en dessous car 'gh release create' va le lire automatiquement, 
        #contrairement aux autres variables d'environnement du dessus
          GH_TOKEN: "${{ github.token }}"
      #pipe pour commandes sur plusieurs lignes
      #on spécifie le numéro de commit car on veut que le workflow se lance sur le commit qui l'a déclenché 
      #et pas sur le dernier commit (au cas où les tests du dernier commit ne passent pas par exemple, 
      #on veut pas que ça impacte notre commit parce que peut-être que nous ça passe!)
        run: |
          gh release create --repo $REPO --target $COMMIT -F changelogs.md $VERSION rust-app.zip
    
        
      
  
